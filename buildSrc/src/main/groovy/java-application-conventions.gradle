/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    // Apply the common convention plugin for shared build configuration between library and application projects.
    id 'java-common-conventions'
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    //QA
    id 'jacoco'
    id "org.sonarqube"

}

tasks['sonarqube'].dependsOn test
test.finalizedBy jacocoTestReport


sonarqube {
    properties {
        property "sonar.sources", "src/main/java"
        property "sonar.sourceEncoding", "UTF-8"
    }
}

dependencies {
    testImplementation(platform('org.junit:junit-bom:5.7.0'))
    testImplementation('org.junit.jupiter:junit-jupiter')

    // Use JUnit Jupiter Engine for testing.
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'

    compileOnly 'org.projectlombok:lombok:1.18.16'
    annotationProcessor 'org.projectlombok:lombok:1.18.16'

    testCompileOnly 'org.projectlombok:lombok:1.18.16'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.16'

    // https://mvnrepository.com/artifact/org.hamcrest/hamcrest-all
    testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'

    compile "org.codehaus.groovy:groovy:3.0.6"
    testCompile platform("org.spockframework:spock-bom:2.0-M4-groovy-3.0")
    testCompile "org.spockframework:spock-core"

}

// Do not generate reports for individual projects
tasks.named("jacocoTestReport") {
    reports {
        xml.enabled true
    }

}


// Share sources folder with other projects for aggregated JaCoCo reports
configurations.create('transitiveSourcesElements') {
    visible = false
    canBeResolved = false
    canBeConsumed = true
    extendsFrom(configurations.implementation)
    attributes {
        attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_RUNTIME))
        attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, Category.DOCUMENTATION))
        attribute(DocsType.DOCS_TYPE_ATTRIBUTE, objects.named(DocsType, 'source-folders'))
    }
    sourceSets.main.java.srcDirs.forEach {
        outgoing.artifact(it)
    }
}

// Share the coverage data to be aggregated for the whole product
configurations.create('coverageDataElements') {
    visible = false
    canBeResolved = false
    canBeConsumed = true
    extendsFrom(configurations.implementation)
    attributes {
        attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_RUNTIME))
        attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, Category.DOCUMENTATION))
        attribute(DocsType.DOCS_TYPE_ATTRIBUTE, objects.named(DocsType, 'jacoco-coverage-data'))
    }
    // This will cause the test task to run if the coverage data is requested by the aggregation task
    outgoing.artifact(tasks.named("test").map { task ->
        task.extensions.getByType(JacocoTaskExtension).destinationFile
    })
}